import React from 'react';
import Enzyme, { mount } from 'enzyme';
import renderer from 'react-test-renderer';
import Adapter from 'enzyme-adapter-react-15';
import BookList from './BookList';

Enzyme.configure({ adapter: new Adapter() });

const scrollEventListenerSpy = jest.fn();

/**
 * This method will be injected in the renderer in order to
 * mock the ref in the component. Those renderers doesnt really access the DOM
 * so we have to mock the responses.
 *
 * @param {Object} element Object generated by react
 *
 * @return {Object}
 */
const createNodeMock = (element) => {
  if (element.props.id === 'scroller') {
    return {
      addEventListener: scrollEventListenerSpy,
    };
  }
  return {};
};

const defaultBookState = {
  stack: [],
  first: 0,
  last: 0,
  total: 0, // in db without filter
  loading: false,
  loadingBackwards: false,
  batchSize: 150,
};
/* eslint-disable */

const bookMocks = [{
  '_id': '59ceadc9485517c5b4b71d88',
  'name': 'Ben uniip.',
  'author': {'name': 'Randee Filberte', 'gender': 'MALE'},
  'genre': {'id': 23, 'name': 'Series'},
  'publishDate': '1929-05-04T17:39:07.390Z',
  'index': 6,
  'horrorFlag': false,
  'financeFlag': false,
}, {
  '_id': '59ceadc9485517c5b4b71d8a',
  'name': 'Ofe mevigi.',
  'author': {'name': 'Beckie Llywellyn', 'gender': 'FEMALE'},
  'genre': {'id': 4, 'name': 'Drame'},
  'publishDate': '1938-08-19T13:38:30.424Z',
  'index': 8,
  'horrorFlag': false,
  'financeFlag': false,
}];
/* eslint-enable */

describe('<BookList />', () => {
  // Snapshot testing
  test('Snapshot sould be correct', () => {
    const bookRequestSpy = jest.fn();
    const component = renderer.create(
      <BookList books={defaultBookState} bookRequest={bookRequestSpy} />,
      { createNodeMock },
    );
    expect(component.toJSON()).toMatchSnapshot();
  });

  test('Should request books on constructor', () => {
    const bookRequestSpy = jest.fn();
    mount(<BookList books={defaultBookState} bookRequest={bookRequestSpy} />);
    expect(bookRequestSpy.mock.calls.length).toBe(1);
  });

  test('Should display correct number of books', () => {
    const bookRequestSpy = jest.fn();
    const books = {
      ...defaultBookState,
      stack: bookMocks,
    };
    const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
    expect(component.find('#scroller div.bookItem').length).toBe(2);
  });

  test('Should not show special flags if none', () => {
    const bookRequestSpy = jest.fn();
    const books = {
      ...defaultBookState,
      stack: [{
        ...bookMocks[0],
        horrorFlag: false,
        financeFlag: false,
      }],
    };
    const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
    expect(component.find('div.bookItem .superHorror').length).toBe(0);
    expect(component.find('div.bookItem .hotFinance').length).toBe(0);
  });

  test('Should show special flags if available', () => {
    const bookRequestSpy = jest.fn();
    const books = {
      ...defaultBookState,
      stack: [{
        ...bookMocks[0],
        horrorFlag: true,
        financeFlag: true,
      }],
    };
    const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
    expect(component.find('div.bookItem span.superHorror').length).toBe(1);
    expect(component.find('div.bookItem span.hotFinance').length).toBe(1);
  });

  test('Should generate proper gender icon (male)', () => {
    const bookRequestSpy = jest.fn();
    const books = {
      ...defaultBookState,
      stack: [{
        ...bookMocks[0],
      }],
    };
    const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
    expect(component.find('img[alt="male"]').length).toBe(1);
  });

  test('Should generate proper gender icon (female)', () => {
    const bookRequestSpy = jest.fn();
    const books = {
      ...defaultBookState,
      stack: [{
        ...bookMocks[1],
      }],
    };
    const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
    expect(component.find('img[alt="female"]').length).toBe(1);
  });

  describe('Scroll Handler', () => {
    test('Should not request more books up if loading', () => {
      const bookRequestSpy = jest.fn();
      // scroll up but loading
      const elementMock = {
        srcElement: {
          scrollTop: 0,
          scrollHeight: 1000,
          offsetHeight: 500,
        },
      };
      const books = {
        ...defaultBookState,
        loading: true,
        loadingBackwards: true,
        total: 1000000,
        last: 1000,
        first: 500,
      };
      const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
      component.instance().scrollHandler(elementMock);
      expect(bookRequestSpy.mock.calls.length).toBe(1);
    });

    test('Should not request more books down if loading', () => {
      const bookRequestSpy = jest.fn();
      // scroll up but loading
      const elementMock = {
        srcElement: {
          scrollTop: 1000,
          scrollHeight: 1000,
          offsetHeight: 500,
        },
      };
      const books = {
        ...defaultBookState,
        loading: true,
        loadingBackwards: true,
        total: 1000000,
        last: 1000,
        first: 500,
      };
      const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
      component.instance().scrollHandler(elementMock);
      expect(bookRequestSpy.mock.calls.length).toBe(1);
    });

    test('Should request more books down if scroll down and not loading', () => {
      const bookRequestSpy = jest.fn();
      // scroll up but loading
      const elementMock = {
        srcElement: {
          scrollTop: 990,
          scrollHeight: 1000,
          offsetHeight: 500,
        },
      };
      const books = {
        ...defaultBookState,
        loading: false,
        loadingBackwards: true,
        total: 1000000,
        last: 1000,
        first: 500,
      };
      const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
      component.instance().scrollHandler(elementMock);
      expect(bookRequestSpy.mock.calls.length).toBe(2);
    });

    test('Should request more books up if scroll up and not loading', () => {
      const bookRequestSpy = jest.fn();
      // scroll up but loading
      const elementMock = {
        srcElement: {
          scrollTop: 0,
          scrollHeight: 1000,
          offsetHeight: 500,
        },
      };
      const books = {
        ...defaultBookState,
        loading: true,
        loadingBackwards: false,
        total: 1000000,
        last: 1000,
        first: 500,
      };
      const component = mount(<BookList books={books} bookRequest={bookRequestSpy} />);
      component.instance().scrollHandler(elementMock);
      expect(bookRequestSpy.mock.calls.length).toBe(2);
    });
  });
});
